/**
 *
 * @author Jun Cao, Franchesco Livado
 */
import java.awt.ActiveEvent;
import java.io.*;
import java.net.*;
import java.net.InetAddress;
import java.util.Date;
import java.lang.*;
import java.util.Arrays;

 public class Receiver extends javax.swing.JFrame {

    private DatagramSocket connSocket;
    private int portSender, portReceiver, connType = 0, packetCount;
    private double startTime, endTime;
    private InetAddress ip;
    private String f;

    /**
     * Creates new form Receiver
     */
    public Receiver() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        //set ip address, sender port, receiver port, file-name
        jTextField1.setText("localhost");
        jTextField2.setText("2mb.jpg");
        jTextField3.setText("1072");
        jTextField4.setText("1080");
        jTextField6.setText("0");
        jTextField6.setEditable(false);

        jLabel7.setText("Total Transmission Time:");

        jLabel8.setText("Packets Received:");

        jToggleButton3.setText("Reliable");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jToggleButton4.setText("Unreliable");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        
        jButton1.addActionListener(new java.awt.event.ActionListener(){
            public void actionPerformed(java.awt.event.ActionEvent evt){
                jButton1ActionPerformed(evt);
            }
        });

        jButton1.setText("Connect");

        jLabel1.setText("IP Address");

        jLabel2.setText("File Name");

        jLabel3.setText("Sender Port");

        jLabel4.setText("Receiver Port");

        jLabel5.setText("Connection Type");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                    .addComponent(jTextField2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                            .addComponent(jTextField3))
                        .addContainerGap(18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jToggleButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToggleButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(35, 35, 35))
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(jToggleButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToggleButton4)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        if (jToggleButton3.isSelected()){
            connType = 0; //reliable
            jToggleButton4.setEnabled(false);
            System.out.println("reliable selected");
        }
        else{
            jToggleButton4.setEnabled(true);
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        if (jToggleButton4.isSelected()){
            connType = 1; //unreliable
            jToggleButton3.setEnabled(false);
            System.out.println("unreliable selected");
        }
        else{
            jToggleButton3.setEnabled(true);
            
        }
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    //sets ip, sender/receiver port #s, and file name and does transfers
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt){
        try {
            ip = InetAddress.getByName(jTextField1.getText());
            portSender = Integer.parseInt(jTextField3.getText());
            portReceiver = Integer.parseInt(jTextField4.getText());
            f = jTextField2.getText();

            connSocket = new DatagramSocket(portReceiver);
            System.out.println("New datagram socket created at portReceiver");
            // reliable
            if (connType == 0){
                System.out.println("Reliable transfer started");
                reliableTransfer();

            }
            //unreliable
            else if (connType == 1){
                System.out.println("Unreliable transfer started");
                unreliableTransfer();
            }
        }
        catch (SocketException e){
        }
        catch (UnknownHostException ue){

        }
    }

    private void reliableTransfer(){
        boolean complete = false;
        byte ack = 0;
        byte[] dataSent = new byte[4];
        byte[] dataReceived = new byte[128];
        packetCount = 0;

        dataSent[0] = ack; //index 0 of data is the ack number
        ackCounter(ack);
        System.out.println("Ack: " + ack);

        startTime = System.currentTimeMillis();
        DatagramPacket first = new DatagramPacket(dataReceived, dataReceived.length);

        // DatagramPacket first = new DatagramPacket(dataSent, dataSent.length, ip, portSender);
        System.out.println("First datagram created");
        try {
            connSocket.receive(first);
            dataReceived = first.getData();
            // connSocket.send(first);
            // System.out.println("first datagram sent")   ;
        }
        catch (SocketException e){
        }
        catch (IOException ie){

        }

        DatagramPacket sendPacket;

        while(!complete){

            //get datagram packet from sender
            DatagramPacket receivePacket = new DatagramPacket(dataReceived, dataReceived.length);
            // System.out.println("receive packet created");
            //set packet to byte array of size 128
            dataReceived = new byte[128];

            try {
                //receive packet
                connSocket.receive(receivePacket);
                System.out.println("Received packet");
                //get data from the packet and set it to dataReceived
                dataReceived = receivePacket.getData();
            }
            catch (SocketException e){
            }
            catch (IOException ie){
            }
            //if not completed then send packet and acks are equal 
            if (dataReceived[0] == ack){
                //write the data to file (from array index 4 to end)
                writeToFile(Arrays.copyOfRange(dataReceived, 4, dataReceived.length));
                System.out.println("Wrote to file");
                //get the new ack     
                dataSent[0] = ack;
                //create new send packet with new info
                sendPacket = new DatagramPacket(dataSent, dataSent.length, ip, portSender);
                // System.out.println("sendpacket created");
                try{
                    connSocket.send(sendPacket);
                    System.out.println("ACK packet sent");
                    ack = ackCounter(ack); //increment ack and packet count
                }catch(IOException e){
                }
            }
            //otherwise if completed
            else if (dataReceived[0] == -1){
                System.out.println("End of Transmission");
                complete = true;
                endTime = System.currentTimeMillis();

                //write rest of array and write to file
                writeToFile(Arrays.copyOfRange(dataReceived, 4, dataReceived.length));   
                System.out.println("Wrote last bytes to file");
                
                jTextField6.setText(String.format("%d",packetCount));
                //write time to gui and close connection
                jLabel7.setText(String.format("Total Transmission Time: %.3fs" ,(((double)(endTime-startTime))/1000)));
                connSocket.close();
            }
        }
    
    }

    private void unreliableTransfer(){
        boolean complete = false;
        byte ack = 0;
        byte[] dataSent = new byte[4];
        byte[] dataReceived = new byte[128];
        int dropStatus = 0;
        packetCount = 0;

        dataSent[0] = ack; //index 0 of data is the ack number
        ackCounter(ack);
        System.out.println("Incremented ack");

        startTime = System.currentTimeMillis();
        DatagramPacket first = new DatagramPacket(dataReceived, dataReceived.length);

        // DatagramPacket first = new DatagramPacket(dataSent, dataSent.length, ip, portSender);
        System.out.println("First datagram created");
        try {
            connSocket.receive(first);
            dataReceived = first.getData();
            // connSocket.send(first);
            // System.out.println("first datagram sent")   ;
        }
        catch (SocketException e){
        }
        catch (IOException ie){

        }

        DatagramPacket sendPacket;

        while(!complete){

            //get datagram packet from sender
            DatagramPacket receivePacket = new DatagramPacket(dataReceived, dataReceived.length);
            // System.out.println("receive packet created");
            //set packet to byte array of size 128
            dataReceived = new byte[128];

            try {
                //receive packet
                connSocket.receive(receivePacket);
                System.out.println("Packet received.");
                //get data from the packet and set it to dataReceived
                dataReceived = receivePacket.getData();
            }
            catch (SocketException e){
            }
            catch (IOException ie){
            }

            if (dropStatus != 10){
                //if not completed then send packet and acks are equal 
                if (dataReceived[0] == ack){
                    //write the data to file (from array index 4 to end)
                    writeToFile(Arrays.copyOfRange(dataReceived, 4, dataReceived.length));
                    System.out.println("Wrote to file");
                    //get the new ack     
                    dataSent[0] = ack;
                    //create new send packet with new info
                    sendPacket = new DatagramPacket(dataSent, dataSent.length, ip, portSender);
                    // System.out.println("sendpacket created");
                    dropStatus++;
                    try{
                        connSocket.send(sendPacket);
                        System.out.println("ACK packet sent");
                        ack = ackCounter(ack); //increment ack and packet count
                    }catch(IOException e){
                    }
            }
            }
            else {
                dropStatus = 0;
                System.out.println(String.format("Packet %d dropped.", packetCount));
            }
            //otherwise if completed
            if (dataReceived[0] == -1){
                System.out.println("End of Transmission");
                complete = true;
                endTime = System.currentTimeMillis();

                //write rest of array and write to file
                writeToFile(Arrays.copyOfRange(dataReceived, 4, dataReceived.length));   
                System.out.println("Wrote last bytes to file");

                jTextField6.setText(String.format("%d",packetCount));
                //write time to gui and close connection
                jLabel7.setText(String.format("Total Transmission Time: %.3fs" ,(((double)(endTime-startTime))/1000)));
                connSocket.close();
            }
        }    }


    private void writeToFile(byte[] packet){
        try (FileOutputStream w = new FileOutputStream(f, true)){
            w.write(packet);
        }catch (FileNotFoundException e){
        } catch (IOException ie){
            
        }
    }

    private byte ackCounter(byte ack){
        if (ack == 127){
            ack = 0;
        }
        else {
            ack++;
        }
        packetCount++;
        System.out.println("ack: " + ack);
        return ack;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Receiver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Receiver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    // End of variables declaration//GEN-END:variables
}
