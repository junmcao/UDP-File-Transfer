import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jun Cao, Franscheco Livado
 */
public class Sender extends javax.swing.JFrame {
        
        
        
    /**
     * Creates new form Sender
     */
    public Sender() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setText("Transfer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("IP Address");

        jLabel2.setText("File Name");

        jLabel3.setText("Sender Port");

        jLabel4.setText("Receiver Port");

        jLabel7.setText("Total Transmission Time:");

        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        //========= default
        jTextField1.setText("localhost");
        jTextField2.setText("1mb.jpg");
        jTextField3.setText("1080");
        jTextField4.setText("1072");
        jTextField5.setText("1000");
        jTextField7.setText("124");
        //==========
        jLabel8.setText("Packets Received:");

        jLabel6.setText("Max Size ");

        jLabel5.setText("Timeout in Âµs");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                            .addComponent(jTextField7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jButton1)
                    .addComponent(jLabel7)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>     

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    
    
    //===================== T R A N S F E R =======================================
    
    private static int segNum = 0;
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        transfer();

    }
    private void transfer() {
        InetAddress receiverIP = null; // IP name working var
        String recieverAddress = ""; // IP name from cmd line arguement
        int senderPort, recieverPort, timeout, mds, segments = 0, i = 0, ackSize = 4;// recieverPort Initialized because of connectionSocket = New DatagramSocket(recieverPort)
        String fileName = null;
        byte[] sendData = new byte[128];
        byte[] recieveData = new byte[4];
        DatagramSocket connectionSocket = null;
        byte[] ack = new byte[ackSize];
        byte[] data = null;
        ack[0] = 0;

        // my code
        recieverAddress = jTextField1.getText(); // string of IP
        senderPort = Integer.parseInt(jTextField3.getText());
        recieverPort = Integer.parseInt(jTextField4.getText());
        fileName = jTextField2.getText();
        mds = Integer.parseInt(jTextField7.getText());
        timeout = Integer.parseInt(jTextField5.getText());
        
        
        // we set the timeout, timeout = Integer.parseInt() 
        
        System.out.println(recieverPort);
        // connects receiver port with IP address by converting ip name from args into usable IP
        try {
            receiverIP = InetAddress.getByName(recieverAddress); 
            connectionSocket = new DatagramSocket(recieverPort);
            System.out.println(connectionSocket);
        } catch (UnknownHostException ex) {
                System.out.println("hi");
            Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(0);
            
        } catch (SocketException ex) {
                System.out.println("bye");
            Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(0);
            
        }
        
        if (mds >= 128) {
                mds = 128 - ack.length;
        }
        
        // file converted into bytes and checked if it meets UDP datagram limit size
        Path path = Paths.get(fileName);
       
        try {
            data = Files.readAllBytes(path);   //Convert file to bytes
            segments = (int) (data.length / mds); // number of packets receiver receives
        } catch (IOException e) {
            System.err.println("IO exception Killing program");
            e.printStackTrace();
            System.exit(0);
        }
        // creates packet to send
        System.out.println("intialization");
        sendData[0] = 0;
        DatagramPacket initPacket = new DatagramPacket(sendData, sendData.length, receiverIP, senderPort);
        // DatagramPacket initPacket = new DatagramPacket(recieveData, recieveData.length);
        System.out.println(initPacket);
        try {
                connectionSocket.send(initPacket);
                // connectionSocket.receive(initPacket); //PROBLEM
                // System.out.println("hi");
                // recieveData = initPacket.getData();
                System.out.println("recieveDate[0]:" + recieveData[0]);
        } catch (IOException ex) {
                Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
                connectionSocket.setSoTimeout(timeout / 1000);//division for seconds conversion
                System.out.println("timeout");
        } catch (SocketException ex) {
                Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, null, ex);
        }
        
      //transfer
        /*
        for (int i = 0; i < segments; i++) {
            System.arraycopy(ack, 0, sendData, 0, 4);
            System.arraycopy(data, segNum * 124, sendData, 4, 124);
            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, receiverIP, senderPort);
            try {
                connectionSocket.send(sendPacket);
                connectionSocket.receive(initPacket);
                //System.out.println("Sent:" + ack[0]);
                if (initPacket.getData()[0] == ack[0]) {
                    ack[0] = ack_switch(ack[0]);
                }

            } catch (SocketTimeoutException e) {
                i--;
            } catch (IOException ex) {
                Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        */

        //transfer all segments but last one 
        System.out.println("Segements: " + segments);
        while (i < segments) {
                System.out.println("Segment: " + i);
                System.arraycopy(ack, 0, sendData, 0, ack.length);
                System.arraycopy(data, segNum * mds, sendData, ack.length, mds);
            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, receiverIP, senderPort);
            try {
                connectionSocket.send(sendPacket);
                connectionSocket.receive(initPacket);
                System.out.println("Sent:" + ack[0]);
                if (initPacket.getData()[0] == ack[0]) {
                    ack_incr(ack);
                    i++;
                    System.out.println(i);
                }

            } catch (SocketTimeoutException e) {
                
            } catch (IOException ex) {
                Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, null, ex);
            }
                
                
        }
        

        //transfer EOT packet
        ack[0] = -1;
        ack[1] = (byte)(data.length-segNum*mds);

        System.arraycopy(ack, 0, sendData, 0, ack.length);
        System.arraycopy(data, segNum*mds, sendData, ack.length, data.length-segNum*mds);
                
        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, receiverIP, senderPort);
        
        try {
            connectionSocket.send(sendPacket);
        } catch (IOException ex) {
            Logger.getLogger(Sender.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("Sent:" + ack[0]);
        //System.out.println("packet total:" + segments);
    }
    
    private void ack_incr(byte[] ack) {
        if (ack[0] == 127) {
            ack[0] = 0;
        }
        else{ 
            ack[0]++;
        }
        segNum++;
        return;
    }
    

                                


    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sender.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sender().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}
